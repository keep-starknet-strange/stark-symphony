// SPDX-FileCopyrightText: 2025 StarkWare Industries Ltd.
//
// SPDX-License-Identifier: MIT

//! Constraints for the Fibonacci square problem.
//! See https://starkware.co/stark-101 for more details.

#ifndef AIR_SIMF
#define AIR_SIMF

#include "field.simf"
#include "channel.simf"
#include "merkle.simf"
#include "sha256.simf"

#define IDX_OFFSET 8
#define DOMAIN_EX_SIZE 8192 // 8x
#define CANONIC_COSET_GEN 1734477367 // field_gen ^ (3 * 2^30 / 8192))

/// Coefficients of the composition polynomial.
type FibSquareCoeffs = (u32, u32, u32);

/// Evaluation of a trace polynomial in a given point, together with the corresponding Merkle proof.
type Eval = (u32, MerkleProof32);

/// Evaluations of the trace polynomials in a given point, together with the corresponding Merkle proofs.
type FibSquareEvals = (Eval, Eval, Eval);

/// Read the coefficients of the composition polynomial from the channel.
fn fibsquare_read_coefficients(state: ChannelState, coeffs: FibSquareCoeffs) -> ChannelState {
    let (alpha0, alpha1, alpha2): FibSquareCoeffs = coeffs;
    let state: ChannelState = channel_mix_32(state, alpha0);
    let state: ChannelState = channel_mix_32(state, alpha1);
    let state: ChannelState = channel_mix_32(state, alpha2);
    state
}

/// Verify the evaluation of a trace polynomial using the Merkle proof and update the channel state.
fn read_eval_checked(state: ChannelState, eval: Eval, idx: u32, p_mt_root: u256) -> ChannelState {
    let (p_ev, p_proof): Eval = eval;
    let (_, leaf_id): (bool, u32) = jet::add_32(idx, DOMAIN_EX_SIZE);
    merkle_verify_32(sha256_32(p_ev), leaf_id, p_proof, p_mt_root);
    channel_mix_32(state, p_ev)
}

/// Read the evaluations of the trace polynomials from the channel.
/// Also verify the evaluations using the Merkle proof.
fn fibsquare_read_evaluations_checked(state: ChannelState, evals: FibSquareEvals, idx: u32, p_mt_root: u256) -> ChannelState {
    let (f_x, f_gx, f_ggx): FibSquareEvals = evals;
    let state: ChannelState = read_eval_checked(state, f_x, idx, p_mt_root);
    let (_, idx): (bool, u32) = jet::add_32(idx, IDX_OFFSET);
    let state: ChannelState = read_eval_checked(state, f_gx, idx, p_mt_root);
    let (_, idx): (bool, u32) = jet::add_32(idx, IDX_OFFSET);
    let state: ChannelState = read_eval_checked(state, f_ggx, idx, p_mt_root);
    state
}

/// Calculate the x point given the index of the trace cell.
fn fibsquare_calc_x(idx: u32) -> u32 {
    mul_mod(FIELD_GEN, exp_mod(CANONIC_COSET_GEN, idx))
}

/// Evaluate the p0 constraint polynomial at the given x point
fn fibsquare_eval_p0(x: u32, f_x: u32) -> u32 {
    // (f(x) - a0) / (x - g^0)
    div_mod(sub_mod(f_x, 1), sub_mod(x, 1))
}

/// Evaluate the p1 constraint polynomial at the given x point
fn fibsquare_eval_p1(x: u32, f_x: u32) -> u32 {
    // (f(x) - a1022) / (x - g^1022)
    div_mod(sub_mod(f_x, 2338775057), sub_mod(x, 2450347685))
}

/// Evaluate the p2 constraint polynomial at the given x point
fn fibsquare_eval_p2(x: u32, f_x: u32, f_gx: u32, f_ggx: u32) -> u32 {
    // (f(ggx) - f(gx)^2 - f(x)^2)
    let num0: u32 = sub_mod(f_ggx, add_mod(mul_mod(f_x, f_x), mul_mod(f_gx, f_gx)));
    // (x - g^1021) * (x - g^1022) * (x - g^1023)
    let num1: u32 = mul_mod(mul_mod(sub_mod(x, 2342081930), sub_mod(x, 2450347685)), sub_mod(x, 532203874));
    // (x^1024 - 1)
    let den: u32 = sub_mod(exp_mod(x, 1024), 1);
    div_mod(mul_mod(num0, num1), den)
}

/// Evaluate the composition polynomial at the given x point
fn fibsquare_eval_cp(x: u32, a0: u32, a1: u32, a2: u32, f_x: u32, f_gx: u32, f_ggx: u32) -> u32 {
    let p0: u32 = fibsquare_eval_p0(x, f_x);
    let p1: u32 = fibsquare_eval_p1(x, f_x);
    let p2: u32 = fibsquare_eval_p2(x, f_x, f_gx, f_ggx);
    add_mod(add_mod(mul_mod(p0, a0), mul_mod(p1, a1)), mul_mod(p2, a2))
}

/// Evaluate the composition polynomial at the given x point
fn fibsquare_compose(x: u32, coeffs: FibSquareCoeffs, evals: FibSquareEvals) -> u32 {
    let (a0, a1, a2): FibSquareCoeffs = coeffs;
    let (e0, e1, e2): FibSquareEvals = evals;
    let (f_x, _): Eval = e0;
    let (f_gx, _): Eval = e1;
    let (f_ggx, _): Eval = e2;
    fibsquare_eval_cp(x, a0, a1, a2, f_x, f_gx, f_ggx)
}

fn test_fibsquare_calc_x() {
    let x: u32 = fibsquare_calc_x(365);
    assert!(jet::eq_32(x, 1944025132));
}

fn test_fibsquare_eval_p0() {
    let x: u32 = 1944025132;
    let f_x: u32 = 2915689030;
    let p0: u32 = fibsquare_eval_p0(x, f_x);
    assert!(jet::eq_32(p0, 3199116755));
}

fn test_fibsquare_eval_cp() {
    let (a0, a1, a2): FibSquareCoeffs = (
        2843266690,
        519917353,
        1882164991
    );
    let (f_x, f_gx, f_ggx): (u32, u32, u32) = (
        2915689030,
        2938213560,
        2430756332
    );
    let x: u32 = 1944025132;
    let cp: u32 = fibsquare_eval_cp(x, a0, a1, a2, f_x, f_gx, f_ggx);
    assert!(jet::eq_32(cp, 587367660));
}

#endif // AIR_SIMF
