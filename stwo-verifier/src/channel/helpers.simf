// SPDX-FileCopyrightText: 2025 StarkWare Industries Ltd.
//
// SPDX-License-Identifier: MIT

//! Helpers for drawing random values from the channel.

#ifndef CHANNEL_RANDOM_SIMF
#define CHANNEL_RANDOM_SIMF

#include "fields/m31.simf"

/// 2P = 2^32 - 2
#define DBL_P 4294967294

/// A tuple of 8 32-bit values.
type U32x8 = (u32, u32, u32, u32, u32, u32, u32, u32);
/// A tuple of 8 M31 values.
type M31x8 = (M31, M31, M31, M31, M31, M31, M31, M31);
/// A tuple of 4 M31 values.
type M31x4 = (M31, M31, M31, M31);

/// Split a 256-bit value into 8 big endian 32-bit values.
/// Returns the limbs as a tuple, from most significant to least significant limbs.
fn split_256(value: u256) -> U32x8 {
    let (abcd, efgh): (u128, u128) = <u256>::into(value);
    let (ab, cd): (u64, u64) = <u128>::into(abcd);
    let (ef, gh): (u64, u64) = <u128>::into(efgh);
    let (a, b): (u32, u32) = <u64>::into(ab);
    let (c, d): (u32, u32) = <u64>::into(cd);
    let (e, f): (u32, u32) = <u64>::into(ef);
    let (g, h): (u32, u32) = <u64>::into(gh);
    (a, b, c, d, e, f, g, h)
}

/// Check if two 32-bit values are uniformly distributed.
/// Returns true if both values are less than DBL_P.
fn is_uniform_2(a: u32, b: u32) -> bool {
    match jet::lt_32(a, DBL_P) {
        true => match jet::lt_32(b, DBL_P) {
            true => true,
            false => false,
        },
        false => false,
    }
}

/// Check if four 32-bit values are uniformly distributed.
/// Returns true if all four values are less than DBL_P.
fn is_uniform_4(a: u32, b: u32, c: u32, d: u32) -> bool {
    match is_uniform_2(a, b) {
        true => match is_uniform_2(c, d) {
            true => true,
            false => false,
        },
        false => false,
    }
}

/// Check if eight 32-bit values are uniformly distributed.
/// Returns true if all eight values are less than DBL_P.
fn is_uniform_8(a: u32, b: u32, c: u32, d: u32, e: u32, f: u32, g: u32, h: u32) -> bool {
    match is_uniform_4(a, b, c, d) {
        true => match is_uniform_4(e, f, g, h) {
            true => true,
            false => false,
        },
        false => false,
    }
}

#endif
