// SPDX-FileCopyrightText: 2025 StarkWare Industries Ltd.
//
// SPDX-License-Identifier: MIT

//! A non-interactive channel for communication between the prover and the verifier.
//! The channel is based on the SHA-256 hash function.

#ifndef UNI_CHANNEL_SIMF
#define UNI_CHANNEL_SIMF

#include "sha256.simf"

/// The channel state is a 256-bit value, initialized to 0.
type ChannelState = u256;

/// Mix a u32 value into the channel state.
///
/// # Arguments
///
/// * `state` - The current channel state.
/// * `input` - The value to mix into the channel state.
fn channel_mix_32(state: ChannelState, input: u32) -> ChannelState {
    let ctx: Ctx8 = jet::sha_256_ctx_8_init();
    let ctx: Ctx8 = jet::sha_256_ctx_8_add_32(ctx, state);
    let ctx: Ctx8 = jet::sha_256_ctx_8_add_4(ctx, input);
    jet::sha_256_ctx_8_finalize(ctx)
}

/// Mix a u256 value into the channel state.
///
/// # Arguments
///
/// * `state` - The current channel state.
/// * `input` - The value to mix into the channel state.
fn channel_mix_256(state: ChannelState, input: u256) -> ChannelState {
    let ctx: Ctx8 = jet::sha_256_ctx_8_init();
    let ctx: Ctx8 = jet::sha_256_ctx_8_add_32(ctx, state);
    let ctx: Ctx8 = jet::sha_256_ctx_8_add_32(ctx, input);
    jet::sha_256_ctx_8_finalize(ctx)
}

/// Update the channel state by hashing the current state.
fn channel_mix(state: ChannelState) -> ChannelState {
    sha256(state)
}

/// Split a 256-bit value into 8 32-bit values.
/// Returns the limbs as a tuple, from most significant to least significant limbs.
fn split_256(value: u256) -> (u32, u32, u32, u32, u32, u32, u32, u32) {
    let (abcd, efgh): (u128, u128) = <u256>::into(value);
    let (ab, cd): (u64, u64) = <u128>::into(abcd);
    let (ef, gh): (u64, u64) = <u128>::into(efgh);
    let (a, b): (u32, u32) = <u64>::into(ab);
    let (c, d): (u32, u32) = <u64>::into(cd);
    let (e, f): (u32, u32) = <u64>::into(ef);
    let (g, h): (u32, u32) = <u64>::into(gh);
    (a, b, c, d, e, f, g, h)
}

/// Reduce a 32-bit limb modulo a 32-bit value.
///
/// # Arguments
///
/// * `limb` - The limb to reduce.
/// * `r` - The current reduction result.
/// * `modulo` - The modulo.
fn reduce_limb_32_mod_32(limb: u32, r: u32, modulo: u32) -> u32 {
    let limb: u64 = <(u32, u32)>::into((0, limb));
    let r: u64 = <(u32, u32)>::into((0, r));
    let modulo: u64 = <(u32, u32)>::into((0, modulo));
    let (_, r): (bool, u64) = jet::add_64(jet::left_shift_64(32, r), limb);
    let r: u64 = jet::modulo_64(r, modulo);
    let (_, res): (u32, u32) = <u64>::into(r);
    res
}

/// Reduce a 256-bit value modulo a 32-bit value.
///
/// # Arguments
///
/// * `value` - The value to reduce.
/// * `modulo` - The modulo.
fn reduce_256_mod_32(value: u256, modulo: u32) -> u32 {
    let (a, b, c, d, e, f, g, h): (u32, u32, u32, u32, u32, u32, u32, u32) = split_256(value);
    let r: u32 = reduce_limb_32_mod_32(a, 0, modulo);
    let r: u32 = reduce_limb_32_mod_32(b, r, modulo);
    let r: u32 = reduce_limb_32_mod_32(c, r, modulo);
    let r: u32 = reduce_limb_32_mod_32(d, r, modulo);
    let r: u32 = reduce_limb_32_mod_32(e, r, modulo);
    let r: u32 = reduce_limb_32_mod_32(f, r, modulo);
    let r: u32 = reduce_limb_32_mod_32(g, r, modulo);
    let r: u32 = reduce_limb_32_mod_32(h, r, modulo);
    r
}

/// Draw a 32-bit value from the channel state.
///
/// # Arguments
///
/// * `state` - The current channel state.
/// * `max` - The upper bound of the value to draw (exclusive).
fn channel_draw_32(state: ChannelState, max: u32) -> (ChannelState, u32) {
    let value: u32 = reduce_256_mod_32(state, max);
    (channel_mix(state), value)
}

fn test_channel_draw_32() {
    let state: ChannelState = 53741377836084766287364085417998971256852254673610164556110591250061061441088;
    let (state, value): (ChannelState, u32) = channel_draw_32(state, 8193);
    assert!(jet::eq_32(value, 365));
    assert!(jet::eq_256(state, 17257280192877315036328845329229606496919448857779645786470826404984163982688));
}

#endif
